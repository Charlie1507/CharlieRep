<%@page contentType="text/html" pageEncoding="UTF-8" %>
<%@page import="java.util.*" %>
<%@page import="com.silva.app.rutas.models.*" %>



<%
  Map<String, String> errores=(Map<String,String>) request.getAttribute("errores");
%>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-2.2.4.min.js"
        integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="
        crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="//cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
<script src="//cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

</head>
<body>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header" id="div1">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse"
                    data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                                    <a class="navbar-brand" href="#" id="enlace1">Rutas App</a>
            </div>




            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button"
                            aria-haspopup="true" aria-expanded="false">Choferes<span
                                class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="<%=request.getContextPath()%>/choferes/listar">Lista Choferes</a></li>
                            <li><a href="<%=request.getContextPath()%>/choferes/alta">Alta Chofer</a></li>


                        </ul>


                    </li>


                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button"
                            aria-haspopup="true" aria-expanded="false">Camiones<span
                                class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="<%=request.getContextPath()%>/camiones/listar">Lista Camiones</a></li>
                            <li><a href="<%=request.getContextPath()%>/camiones/alta">Alta Camion</a></li>


                        </ul>
                    </li>


                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button"
                            aria-haspopup="true" aria-expanded="false">Rutas<span
                                class="caret"></span></a>
                        <ul class="dropdown-menu">
                            <li><a href="<%=request.getContextPath()%>/rutas/alta">Alta Ruta</a></li>


                        </ul>
                    </li>

                </ul>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
      </nav>


    <div class="container">
        <div class="row">
            <div class="col-12">
                <h2>Formulario Alta Camion</h2>
            </div>
        </div>
        <br>
        <% if(errores != null && errores.size()>0){%>
            <ul class="alert alert-danger mx-5 px-5">
            <% for(String error: errores.values()){%>
                <li><%=error%></li>
            <%}%>
            </ul>
        <%}%>

        <div class="row">
            <form action="<%=request.getContextPath()%>/camiones/alta" method="post">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="">Matricula</label>
                        <input type="text" name="matricula" id="matricula" class="form-control" value="${param.matricula}">
                        <%
                        if(errores != null && errores.containsKey("matricula")){
                            out.println("<span class='text-danger'>"+errores.get("matricula") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Tipo del Camion</label>
                        <select name="tipoCamion" id="tipoCamion" class="form-control">

                            <%
                                com.silva.app.rutas.models.enums.Tipos[] tipos = com.silva.app.rutas.models.enums.Tipos.values();
                                for (com.silva.app.rutas.models.enums.Tipos tipoEnum : tipos) {
                            %>
                                <option value="<%= tipoEnum.name() %>"><%= tipoEnum.name() %></option>
                            <%
                                }
                            %>
                        </select>

                        <%
                        if(errores != null && errores.containsKey("tipoCamion")){
                            out.println("<span class='text-danger'>"+errores.get("tipoCamion") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Modelo (año)</label>
                        <input type="text" name="modelo" id="modelo" class="form-control" value="${param.modelo}">
                        <%
                        if(errores != null && errores.containsKey("modelo")){
                            out.println("<span class='text-danger'>"+errores.get("modelo") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Marca</label>
                        <select name="marca" id="marca" class="form-control">

                            <%
                                com.silva.app.rutas.models.enums.Marcas[] marcas = com.silva.app.rutas.models.enums.Marcas.values();
                                for (com.silva.app.rutas.models.enums.Marcas marcaEnum : marcas) {
                            %>
                                <option value="<%= marcaEnum.name() %>"><%= marcaEnum.name() %></option>
                            <%
                                }
                            %>
                        </select>

                        <%
                        if(errores != null && errores.containsKey("marca")){
                            out.println("<span class='text-danger'>"+errores.get("marca") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Capacidad</label>
                        <input type="text" name="capacidad" id="capacidad" class="form-control" value="${param.capacidad}">
                        <%
                        if(errores != null && errores.containsKey("capacidad")){
                            out.println("<span class='text-danger'>"+errores.get("capacidad") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Kilometraje</label>
                        <input type="text" name="kilometraje" id="kilometraje" class="form-control" value="${param.kilometraje}">
                        <%
                        if(errores != null && errores.containsKey("kilometraje")){
                            out.println("<span class='text-danger'>"+errores.get("kilometraje") + "</span>");
                        }
                        %>
                    </div>

                    <div class="form-group">
                        <label for="">Disponibilidad</label>
                        <input type="checkbox" name="disponibilidad" id="disponibilidad" class="form-check-input" value="${param.disponibilidad}" checked>

                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</body>
</html>

proyecto 3 base de datos en pagina con API de google y API propia 
proyecto 4 --backend con spring boot y front end con angular


API 


Celular		->	Cargador	->	Pared

Cliente		->	Enchufe		->	Servidor
(Vista)

API.-
medio para cambiar informacion entre dos 
pieza de codigo que permite comunicar a dos aplicaciones

jQuery.- Libreria de JS (Dependencia de JS)

ajax.- tecnologia que nos permite hacer peticiones asincronas en segundo plano

MVC es un patron de diseño que se conforma de modelo, vista y controlador 

SOA -> Service oriented Architecture

Las APIs regresan valores y estos los regresan en tipo Json

metadatos- datos de mas datos 

Metodos HTTP
POST
GET
PUT
DELETE......
request
{
	linea de peticion
		metodos HTTP		url		protocolo HTTP
		POST/GET		/api		HTTP/1.1

	cabecera
		Metadatos

	cuerpo (opcional)
	Datos de la peticion
} 


Json es un objeto y regresa los datos en este objeto

Response
{
	Linea de estatus
		Estatus			Codigo		Protocolo HTTP
		exitoso/error		404/500..	HTTP/1.1

	Cabeceros
		Metadatos

	Cuerpo(Opcional)
		Datos de la respuesta	
}

Se puede enviar informacion en los parametros, el los cabeceros o en el cuerpo

5510548020


nO SE GUARDA LA LISTA DE FAV



Recommiendo amplamente tr network, aprendes muchisimo ademas de que todo 


yo soy tr network



proyecto 4 otra base, otra api y otra vista por aparte

JPA- Java Persistence API / Java Persistence Tecnology
	Tecnologia para la persistencia de datos
	Tecnologia para almacenamiento de datos
	El objetivo de JPA es aprovechar las ventajas de POO al momento de interactuar con la BD 
	Es una especificacion (documento que explica como gestionar la funcionalidad) JSR 338

Interactuar con la BD sin JPA
(Ejemplo) 
Connection conn=...
String sql = "insert into table...... values...."
PreparedStatment stmt=......
...
...
stmt.updated;


vs

Interactuar con la BD sin JPA
Chofer c = new Chofer();
c.set..
c.set...
..
..
..
Bd bd = new BD();
bd.insert(c);
be.saveChanges();
----------

Hibarnate -> es un framework que implementa a JPA
		es un ORM (Objects Relational Mapping)

Pasos 1 Dar de alta las tablas/objeto
	2 Dar de alta columnas/atributos
	3 Dar de alta foreign keys/(cardinalidad*) relaciones (si aplica) 

*Cardinalidad-
	uno a uno
	uno a muchos
	muchos a uno
	muchos a muchos


--------------
DTO.- Data transfer object

Inyeccion de dependencias.- es un patron de diseño orientado a objetos, en el que se suministran objetos a una clase en lugar de ser la propia clase la que cree dichos objetos
		Bajo acoplamiento
		Implementacion de abstaracciones(Interfaces)
Inversion de dependencias.- es un conjunto de tecnicas para reducir el acoplamieto es decir, conseguir un bajo acoplamiento

Jason web Token(JWT).-
